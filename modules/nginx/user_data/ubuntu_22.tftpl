#!/bin/bash

# Regresh package index, install latest versions of packages, and delete obsolete packages
apt update -y
apt upgrade -y
apt autoremove

# Configure unattended-upgrades
apt install unattended-upgrades -y
systemctl is-enabled --quiet unattended-upgrades || systemctl enable unattended-upgrades
systemctl is-active --quiet unattended-upgrades || systemctl start unattended-upgrades
# Attempt to auto fix if issues with upgrades
sed -i '/\/\/Unattended-Upgrade::AutoFixInterruptedDpkg "true";/c\Unattended-Upgrade::AutoFixInterruptedDpkg "true";' /etc/apt/apt.conf.d/50unattended-upgrades
# Remove unused dependencies
sed -i '/\/\/Unattended-Upgrade::Remove-Unused-Dependencies "false";/c\Unattended-Upgrade::Remove-Unused-Dependencies "true";' /etc/apt/apt.conf.d/50unattended-upgrades
# Reboot if required for upgrade
sed -i '/\/\/Unattended-Upgrade::Automatic-Reboot "false";/c\Unattended-Upgrade::Automatic-Reboot "true";' /etc/apt/apt.conf.d/50unattended-upgrades
# Reboot even if users are logged in
sed -i '/\/\/Unattended-Upgrade::Automatic-Reboot-WithUsers "true";/c\Unattended-Upgrade::Automatic-Reboot-WithUsers "true";' /etc/apt/apt.conf.d/50unattended-upgrades
# Set reboot time to 03:00 AM
sed -i '/\/\/Unattended-Upgrade::Automatic-Reboot-Time "02:00";/c\Unattended-Upgrade::Automatic-Reboot-Time "03:00";' /etc/apt/apt.conf.d/50unattended-upgrades
systemctl restart unattended-upgrades

# Create SSH user, copy SSH keys and known_hosts, and add sudoers permissions
adduser ssh_ubuntu
usermod -amG sudoers ssh_ubuntu
cp -r /home/ubuntu/.ssh /home/ssh_ubuntu/
chown -R ssh_ubuntu:ssh_ubuntu /home/ssh_ubuntu/.ssh
echo "ssh_ubuntu ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/ssh_ubuntu

# Update sshd_config settings to increase security
echo "Port ${ssh_port}" >> /etc/ssh/sshd_config
echo -e "AllowUsers ubuntu@${ssh_ip} ssh_ubuntu@${ssh_ip}" >> /etc/ssh/sshd_config
echo "PasswordAuthentication no" >> /etc/ssh/sshd_config
echo "PermitRootLogin no" >> /etc/ssh/sshd_config
systemctl restart sshd

# Configure UFW
ufw allow 80
ufw allow 443
ufw allow from ${ssh_ip} proto tcp to any port ${ssh_port}
ufw --force enable 

# Enable and start AppArmor
systemctl is-enabled --quiet apparmor || systemctl enable apparmor
systemctl is-active --quiet apparmor || systemctl start apparmor

# Set hostname and local DNS
hostnamectl set-hostname nginx
echo "127.0.0.10 ec2" >> /etc/hosts

# Install nginx
apt install nginx -y
systemctl is-enabled --quiet nginx || systemctl enable nginx
systemctl is-active --quiet nginx || systemctl start nginx

# Configure nginx server block
# Create directory for web pages
mkdir -p /var/www/${domain_name}/html
chown -R $USER:$USER /var/www/${domain_name}/html
chmod -R 755 /var/www/${domain_name}
# Create index and error pages for server block
cat > /var/www/${domain_name}/html/index.html << EOF
<html>
    <head>
        <title>Welcome to ${domain_name}!</title>
    </head>
    <body>
        <h1>Success!  The ${domain_name} server block is working!</h1>
    </body>
</html>
EOF
cat > /var/www/${domain_name}/html/error.html << EOF
<html>
    <head>
        <title>Error!</title>
    </head>
    <body>
        <h1>Error!  The page you are looking for does not exist on ${domain_name}!</h1>
    </body>
</html>
EOF
# Create nginx configuration file
cat > /etc/nginx/sites-available/${domain_name} << EOF
server {

    listen 80;
    listen [::]:80;
    server_name ${domain_name};
    root /var/www/${domain_name}/html;
    index index.html;

    error_page 400 403 404 405 414 416 /error.html;
    error_page 500 501 502 503 504 /error.html;

}
EOF
# Create symlink to enable configuration file
ln -s /etc/nginx/sites-available/${domain_name} /etc/nginx/sites-enabled/
# Remove default server block
unlink /etc/nginx/sites-enabled/default
systemctl reload nginx

# Install and configure Certbot for SSL/TLS certificate
apt install certbot -y
apt install python3-certbot-nginx -y
certbot --nginx --non-interactive -d ${domain_name} --email ${certbot_email} --agree-tos

# Install and configure Fail2ban
apt install fail2ban -y
systemctl is-enabled --quiet fail2ban || systemctl enable fail2ban
systemctl is-active --quiet fail2ban || systemctl start fail2ban
# SSH jail
cat > /etc/fail2ban/jail.d/sshd.local << EOF
[sshd]
enabled = true
port = ${ssh_port} 
backend = systemd
EOF
systemctl restart fail2ban
