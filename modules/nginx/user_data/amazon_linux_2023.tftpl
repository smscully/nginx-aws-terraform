#!/bin/bash

# Regresh package index, install latest versions of packages, and delete obsolete packages
yum upgrade -y

# Configure dnf-automatic 
yum install dnf-automatic -y
systemctl is-enabled --quiet dnf-automatic.timer || systemctl enable dnf-automatic.timer
systemctl is-active --quiet dnf-automatic.timer || systemctl start dnf-automatic.timer
# Limit upgrades to security
sed -i '/upgrade_type = default/c\upgrade_type = security' /etc/dnf/automatic.conf
# Apply updates after downloaded
sed -i '/apply_updates = no/c\apply_updates = yes' /etc/dnf/automatic.conf
# Set dnf-automatic time to 03:00 AM
sed -i '/OnCalendar=\*-\*-\* 6:00/c\OnCalendar=\*-\*-\* 3:00' /usr/lib/systemd/system/dnf-automatic.timer

# Create SSH user, copy SSH keys and known_hosts, and add sudoers permissions
adduser ssh_al
usermod -amG sudoers ssh_al
cp -r /home/ec2-user/.ssh /home/ssh_al/
chown -R ssh_al:ssh_al /home/ssh_al/.ssh
echo "ssh_al ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/ssh_al

# Update sshd_config settings to increase security
echo "Port ${ssh_port}" >> /etc/ssh/sshd_config
echo -e "AllowUsers ec2-user@${ssh_ip} ssh_al@${ssh_ip}" >> /etc/ssh/sshd_config
echo "PasswordAuthentication no" >> /etc/ssh/sshd_config
echo "PermitRootLogin no" >> /etc/ssh/sshd_config
systemctl restart sshd

# Configure nftables
yum install nftables -y
systemctl enable nftables
systemctl start nftables
# Create nftables config file
cat > /etc/sysconfig/ec2.nft << EOF
flush ruleset

table inet ec2_table {

    counter cnt_ssh_new {
    }

    counter cnt_http_new {
    }

    chain ec2_input {
        type filter hook input priority 0; policy accept;
        iif lo counter accept
        ct state vmap {
            established : jump ec2_est,
            related : jump ec2_rel,
            invalid : jump ec2_inv,
            new : jump ec2_new
        }
        counter drop
    }

    chain ec2_est {
        counter accept
    }

    chain ec2_rel {
        counter accept
    }

    chain ec2_inv {
        counter drop
    }

    chain ec2_new {
        ip saddr ${ssh_ip} tcp dport ${ssh_port} counter name cnt_ssh_new accept
        tcp dport { 80, 443 } counter name cnt_http_new accept
    }

}
EOF
# Load configuration file
nft -f /etc/sysconfig/ec2.nft
# Generate config file for persistence across reboots
nft list ruleset > /etc/sysconfig/nftables.conf

# Set SELinux to enforcing mode
sed -i "s/^SELINUX=.*$/SELINUX=enforcing/" /etc/selinux/config
setenforce 1
# Add SSH port to SELinux policy
semanage port -a -t ssh_port_t -p tcp ${ssh_port} 

# Set hostname and local DNS
hostnamectl set-hostname nginx
echo "127.0.0.10 ec2" >> /etc/hosts

# Install nginx
yum install nginx -y
systemctl is-enabled --quiet nginx || systemctl enable nginx
systemctl is-active --quiet nginx || systemctl start nginx

# Configure nginx server block
# Create directory for web pages
mkdir -p /var/www/${domain_name}/html
chown -R $USER:$USER /var/www/${domain_name}/html
chmod -R 755 /var/www/${domain_name}
# Create index and error pages for server block
cat > /var/www/${domain_name}/html/index.html << EOF
<html>
    <head>
        <title>Welcome to ${domain_name}!</title>
    </head>
    <body>
<h1>Success!  The ${domain_name} server block is working!</h1>
    </body>
</html>
EOF
cat > /var/www/${domain_name}/html/error.html << EOF
<html>
    <head>
        <title>Error!</title>
    </head>
    <body>
        <h1>Error!  The page you are looking for does not exist on ${domain_name}!</h1>
    </body>
</html>
EOF
# Create nginx configuration file
cat > /etc/nginx/conf.d/${domain_name}.conf << EOF
server {

    listen 80;
    listen [::]:80;
    server_name ${domain_name};
    root /var/www/${domain_name}/html;
    index index.html;

    error_page 400 403 404 405 414 416 /error.html;
    error_page 500 501 502 503 504 /error.html;

}
EOF
systemctl reload nginx

# Update SELinux context to support serving content from web directory
chcon -vR system_u:object_r:httpd_sys_content_t:s0 /var/www/${domain_name}

# Install and configure Certbot for SSL/TLS certificate
yum install python3 augeas-libs -y
python3 -m venv /opt/certbot/
/opt/certbot/bin/pip install --upgrade pip
yes | /opt/certbot/bin/pip install certbot certbot-nginx
/opt/certbot/bin/certbot --nginx --non-interactive -d ${domain_name} --email ${certbot_email} --agree-tos
# Create systemd service and timer to auto-renew Certbot
cat >/lib/systemd/system/certbot-custom.service << EOF 
[Unit]
Description="Certbot - custom"
[Service]
Type=oneshot
ExecStart=/opt/certbot/bin/certbot -q renew
PrivateTmp=true
EOF
systemctl enable certbot-custom.service
systemctl start certbot-custom.service
cat >/lib/systemd/system/certbot-custom.timer << EOF 
[Unit]
Description=Run certbot twice daily
[Timer]
OnCalendar=*-*-* 00,12:00:00
RandomizedDelaySec=43200
Persistent=true
[Install]
WantedBy=timers.target
EOF
systemctl enable certbot-custom.timer
systemctl start certbot-custom.timer

# Install and configure Fail2ban
yum install fail2ban -y
systemctl is-enabled --quiet fail2ban || systemctl enable fail2ban
systemctl is-active --quiet fail2ban || systemctl start fail2ban
# SSH jail
cat > /etc/fail2ban/jail.d/sshd.local << EOF
[sshd]
enabled = true
port = ${ssh_port} 
backend = systemd
EOF
systemctl restart fail2ban
